// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: universe.sql

package sqlc

import (
	"context"
)

const fetchUniverseRoot = `-- name: FetchUniverseRoot :one
SELECT asset_id, group_key, mssmt_nodes.hash_key root_hash, 
       mssmt_nodes.sum root_sum
FROM universe_roots
JOIN mssmt_roots 
    ON universe_roots.root_node_id = mssmt_roots.id
JOIN mssmt_nodes 
    ON mssmt_nodes.hash_key = mssmt_roots.hash_key AND
       mssmt_nodes.namespace = mssmt_roots.namespace
WHERE mssmt_nodes.namespace = $1
`

type FetchUniverseRootRow struct {
	AssetID  []byte
	GroupKey []byte
	RootHash []byte
	RootSum  int64
}

func (q *Queries) FetchUniverseRoot(ctx context.Context, namespace string) (FetchUniverseRootRow, error) {
	row := q.db.QueryRowContext(ctx, fetchUniverseRoot, namespace)
	var i FetchUniverseRootRow
	err := row.Scan(
		&i.AssetID,
		&i.GroupKey,
		&i.RootHash,
		&i.RootSum,
	)
	return i, err
}

const insertUniverseLeaf = `-- name: InsertUniverseLeaf :exec
INSERT INTO universe_leaves (
    asset_genesis_id, universe_root_id, leaf_node_id
) VALUES (
    $1, $2, $3
)
`

type InsertUniverseLeafParams struct {
	AssetGenesisID int32
	UniverseRootID int32
	LeafNodeID     []byte
}

func (q *Queries) InsertUniverseLeaf(ctx context.Context, arg InsertUniverseLeafParams) error {
	_, err := q.db.ExecContext(ctx, insertUniverseLeaf, arg.AssetGenesisID, arg.UniverseRootID, arg.LeafNodeID)
	return err
}

const insertUniverseRoot = `-- name: InsertUniverseRoot :one
INSERT INTO universe_roots (
    root_node_id, asset_id, group_key
) VALUES (
    $1, $2, $3
) RETURNING id
`

type InsertUniverseRootParams struct {
	RootNodeID int32
	AssetID    []byte
	GroupKey   []byte
}

func (q *Queries) InsertUniverseRoot(ctx context.Context, arg InsertUniverseRootParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertUniverseRoot, arg.RootNodeID, arg.AssetID, arg.GroupKey)
	var id int32
	err := row.Scan(&id)
	return id, err
}
